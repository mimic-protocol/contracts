{
  "_format": "hh3-sol-build-info-1",
  "id": "88ed3fd4da82cd77ebaf74c1863f87aa8471fcd4",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "publicSourceNameMap": {
    "contracts/Controller.sol": "contracts/Controller.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/"
      ]
    },
    "sources": {
      "contracts/Controller.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport './interfaces/IController.sol';\n\n/**\n * @title Controller\n * @dev Manages allow lists for solvers, executors and proposal signers\n */\ncontract Controller is IController, Ownable {\n    // List of allowed solvers\n    mapping (address => bool) public override isSolverAllowed;\n\n    // List of allowed executors\n    mapping (address => bool) public override isExecutorAllowed;\n\n    // List of allowed proposal signers\n    mapping (address => bool) public override isProposalSignerAllowed;\n\n    /**\n     * @dev Creates a new Controller contract\n     * @param owner Address that will own the contract\n     * @param solvers List of allowed solvers\n     * @param executors List of allowed executors\n     * @param proposalSigners List of allowed proposal signers\n     */\n    constructor(address owner, address[] memory solvers, address[] memory executors, address[] memory proposalSigners)\n        Ownable(owner)\n    {\n        for (uint256 i = 0; i < solvers.length; i++) _setAllowedSolver(solvers[i], true);\n        for (uint256 i = 0; i < executors.length; i++) _setAllowedExecutor(executors[i], true);\n        for (uint256 i = 0; i < proposalSigners.length; i++) _setAllowedProposalSigner(proposalSigners[i], true);\n    }\n\n    /**\n     * @dev Sets permissions for multiple solvers\n     * @param solvers List of solver addresses\n     * @param alloweds List of permission statuses\n     */\n    function setAllowedSolvers(address[] memory solvers, bool[] memory alloweds) external override onlyOwner {\n        if (solvers.length != alloweds.length) revert ControllerInputInvalidLength();\n        for (uint256 i = 0; i < solvers.length; i++) _setAllowedSolver(solvers[i], alloweds[i]);\n    }\n\n    /**\n     * @dev Sets permissions for multiple executors\n     * @param executors List of executor addresses\n     * @param alloweds List of permission statuses\n     */\n    function setAllowedExecutors(address[] memory executors, bool[] memory alloweds) external override onlyOwner {\n        if (executors.length != alloweds.length) revert ControllerInputInvalidLength();\n        for (uint256 i = 0; i < executors.length; i++) _setAllowedExecutor(executors[i], alloweds[i]);\n    }\n\n    /**\n     * @dev Sets permissions for multiple proposal signers\n     * @param signers List of proposal signer addresses\n     * @param alloweds List of permission statuses\n     */\n    function setAllowedProposalSigners(address[] memory signers, bool[] memory alloweds) external override onlyOwner {\n        if (signers.length != alloweds.length) revert ControllerInputInvalidLength();\n        for (uint256 i = 0; i < signers.length; i++) _setAllowedProposalSigner(signers[i], alloweds[i]);\n    }\n\n    /**\n     * @dev Sets a solver permission\n     */\n    function _setAllowedSolver(address solver, bool allowed) internal {\n        isSolverAllowed[solver] = allowed;\n        emit SolverAllowedSet(solver, allowed);\n    }\n\n    /**\n     * @dev Sets an executor permission\n     */\n    function _setAllowedExecutor(address executor, bool allowed) internal {\n        isExecutorAllowed[executor] = allowed;\n        emit ExecutorAllowedSet(executor, allowed);\n    }\n\n    /**\n     * @dev Sets a proposal signer permission\n     */\n    function _setAllowedProposalSigner(address signer, bool allowed) internal {\n        isProposalSignerAllowed[signer] = allowed;\n        emit ProposalSignerAllowedSet(signer, allowed);\n    }\n}\n"
      },
      "contracts/interfaces/IController.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @title Controller interface\n */\ninterface IController {\n    /**\n     * @dev The input arrays are not of equal length\n     */\n    error ControllerInputInvalidLength();\n\n    /**\n     * @dev Emitted every time a solver permission is set\n     */\n    event SolverAllowedSet(address indexed solver, bool allowed);\n\n    /**\n     * @dev Emitted every time an executor permission is set\n     */\n    event ExecutorAllowedSet(address indexed executor, bool allowed);\n\n    /**\n     * @dev Emitted every time a proposal signer permission is set\n     */\n    event ProposalSignerAllowedSet(address indexed proposalSigner, bool allowed);\n\n    /**\n     * @dev Tells whether a solver is allowed\n     * @param solver Address of the solver being queried\n     */\n    function isSolverAllowed(address solver) external view returns (bool);\n\n    /**\n     * @dev Tells whether an executor is allowed\n     * @param executor Address of the executor being queried\n     */\n    function isExecutorAllowed(address executor) external view returns (bool);\n\n    /**\n     * @dev Tells whether a proposal signer is allowed\n     * @param signer Address of the proposal signer being queried\n     */\n    function isProposalSignerAllowed(address signer) external view returns (bool);\n\n    /**\n     * @dev Sets permissions for multiple solvers\n     * @param solvers List of solver addresses\n     * @param alloweds List of permission statuses\n     */\n    function setAllowedSolvers(address[] memory solvers, bool[] memory alloweds) external;\n\n    /**\n     * @dev Sets permissions for multiple executors\n     * @param executors List of executor addresses\n     * @param alloweds List of permission statuses\n     */\n    function setAllowedExecutors(address[] memory executors, bool[] memory alloweds) external;\n\n    /**\n     * @dev Sets permissions for multiple proposal signers\n     * @param signers List of proposal signer addresses\n     * @param alloweds List of permission statuses\n     */\n    function setAllowedProposalSigners(address[] memory signers, bool[] memory alloweds) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      }
    }
  }
}